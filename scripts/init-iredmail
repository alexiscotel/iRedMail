#!/bin/bash

## TODO : Find a way to use a config file to set the variables of iRedMail installation screens

############
## COLORS ##
############
nocolor='\033[0m'
whiite='\033[0;97m'
whiitebold='\033[0;1;97m'
purple='\033[0;38;5;201m'
blue='\033[0;38;5;45m'
blueblink='\033[0;5;38;5;45m'
darkblue='\033[0;38;5;27m'
green='\033[0;32m'
greendim='\033[0;3;32m'
yellow='\033[0;38;5;178m'
orange='\e[0;1;38;5;166;3m'
orangeital='\e[0;3;38;5;166m'
gray='\033[0;38;5;249m'
graybold='\033[0;1;38;5;249m'
graydim='\033[0;2;38;5;250m'
red='\033[0;91m'
## CUSTOM
# c__fctName='\033[0;38;5;45m'
c__fctName=$whiitebold
c__fctAction=$graydim
c__fct2=$gray
c__msgVar=$graybold
c__value=$blue
c__value2=$purple
c__error=$red
c__warning=$orange
c__notice=$yellow
c__success=$green

###############
## PARAMETERS
###############
commandPath=$0
commandName=`basename "$commandPath"`
declare -a g_errors=()
declare -a g_warnings=()
declare -a g_notices=()
verbose=false
silent=false


###############
## CHECK ROOT
###############
# if [ "$EUID" -ne 0 ]; then
# 	printf "${c__error}Please run this script as root.${nocolor}\n"
# 	exit 1
# fi

########################
## VALIDATOR FUNCTIONS
########################

CheckCommands() {
	local errors=()
	local status=0

	if ! command -v apt > /dev/null; then
		# printf "${c__error}apt is not installed${nocolor}\n"
		errors+=("${c__error}apt is not installed${nocolor}")
		status=1
	elif ! command -v wget > /dev/null; then
		# printf "${c__error}wget is not installed${nocolor}\n"
		errors+=("${c__error}wget is not installed${nocolor}")
		status=2
	else
		status=0
	fi

	# check if errors contains errors and show them
	if [ ${#errors[@]} -gt 0 ]; then
		for err in "${errors[@]}"; do
			printf "${c__error}${err}${nocolor}\n"
		done
	fi
	return $status
}

###############
## FUNCTIONS ##
###############

# Install the dependencies
InstallDependencies() {
	printf "${c__fctName}Install the dependencies${nocolor}\n"
	apt update && apt upgrade && apt install gzip gnupg2 wget -y
	local test=$?
	if [ $test -ne 0 ]; then
		printf "${c__error}The installation of dependencies failed${nocolor}\n"
		return 1
	fi
	return 0
}


# Install the repository
InstallRepository() {
	printf "${c__fctName}Install the repository${nocolor}\n"
	# Download & Extract the repository
	wget https://github.com/iredmail/iRedMail/archive/refs/tags/1.6.3.tar.gz && tar zxf 1.6.3.tar.gz
	local test=$?
	if [ $test -ne 0 ]; then
		printf "${c__error}The download or extraction failed${nocolor}\n"
		return 1
	fi
	return 0
}

StartIRedMailInstall() {
	printf "${c__fctName}Start the iRedMail installation${nocolor}\n"
	# Go to the repository
	cd iRedMail-1.6.3
	local test=$?
	if [ $test -ne 0 ]; then
		printf "${c__error}The repository doesn't exist${nocolor}\n"
		return 1
	fi
	# Start the installation
	bash iRedMail.sh
	local test=$?
	if [ $test -ne 0 ]; then
		printf "${c__error}The installation failed${nocolor}\n"
		return 1
	else
		printf "${c__success}The installation is finished${nocolor}\n"
		return 0
	fi
}


######################
## DISPLAY FUNCTIONS
######################

StartText () {
	printf "${blue}$commandName script ${nocolor}\n"
	printf "\n"
}
HowToUse() {
	printf "‚ùì ${blue}How to use${gray}\n"
	printf "\n"
	printf "${whiitebold}This script is made to automatize iRedMail installation & configuration${nocolor}\n"
	printf "\n"
	printf "${commandName} --verbose --silent${nocolor}\n"
	printf "\n"
	printf "  --verbose     : show logs\n"
	printf "  --silent      : hide logs\n"
	printf "\n"
	printf "  -h  --help   : show this message\n"
	printf "${nocolor}\n"
}

EndOfScript() {
	printf "\n"
	printf "${c__fctName}${commandName}${nocolor} - ${c__fct2}Resume${nocolor}\n"
	# show error messages if there are
	if [[ ${#g_errors[@]} -gt 0 ]]; then
		printf "${c__error}‚ùå ${#g_errors[@]} error(s)${nocolor}\n"
		for err in "${g_errors[@]}"; do
			printf "  - ${err}${nocolor}\n"
		done
	else
		printf "${green}‚úÖ No error${nocolor}\n"
	fi

	printf "üëã ${blue}Bye bye${nocolor} üëã\n"
	printf "\n"
}

## ------------------ ##
## ----- SCRIPT ----- ##

# R√©cup√©ration des param√®tres en utilisant getopts
while [[ $# -gt 0 ]]; do
  case $1 in
	--verbose)
		shift
		verbose=true
		;;
	--silent)
		shift
		silent=true
		;;
    -h | --help)
		HowToUse
		exit 0
		;;
	*)
      	echo "Option invalide: $1"
      	exit 1
      	;;
  esac
  shift
done


if [[ "$silent" == false ]]; then
	StartText
fi


CheckCommands
if [ $? -ne 0 ]; then
	exit 1
fi

InstallDependencies
if [ $? -ne 0 ]; then
	exit 1
fi
InstallRepository
if [ $? -ne 0 ]; then
	exit 1
fi

StartIRedMailInstall
if [ $? -ne 0 ]; then
	exit 1
else
	printf "${c__fctName}Backup the config file${nocolor}\n"
	mv /root/iRedMail/config /root/iRedMail/config.bak
	test_mv=$?
	if [ $test_mv -ne 0 ]; then
		printf "${c__error}The backup of the config file failed${nocolor}\n"
		exit 1
	fi
	gpg -c /root/iRedMail/config.bak
	test_gpg=$?
	if [ $test_gpg -ne 0 ]; then
		printf "${c__error}The encryption of the config file failed${nocolor}\n"
		exit 1
	fi
	printf "${c__fctName}Reboot the server ...${nocolor}\n"
	reboot
fi